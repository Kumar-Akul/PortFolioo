"""
Django settings for portfo project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('DJANGO_SECRET_KEY', default='a-fallback-secret-key-for-local-dev-only')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False # Set to True for local development, False for production

ALLOWED_HOSTS = [
    '127.0.0.1',
    '.elasticbeanstalk.com',
    'akul-kumar.engineer',    # Your custom domain
    'www.akul-kumar.engineer' # Your www subdomain
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'portfolio',  # added for portfolio app
    'storages',   # NEW: Add django-storages
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'portfo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'),],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'portfo.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# Base STATIC_URL - this is not used for S3/CloudFront but needed by Django
STATIC_URL = 'static/'

# Directories where Django will look for static files
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# The directory where 'collectstatic' will place static files locally if not using S3 storage backend
# IMPORTANT: This must be defined even if using S3 storage backend
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# === AWS S3 Settings for Django Storages ===
# Define these variables BEFORE the STORAGES dictionary, as they are used within it.

AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME')

# Ensure this matches your S3 bucket's region (eu-north-1 for your bucket)
AWS_S3_REGION_NAME = 'eu-north-1'
AWS_S3_SIGNATURE_VERSION = 's3v4' # Recommended for most regions

AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL = None # Rely on bucket policies

# Your CloudFront Distribution Domain Name
AWS_S3_CUSTOM_DOMAIN = 'd3a4kjqw2cx7r.cloudfront.net' # *** IMPORTANT: Replace with your actual CloudFront domain if different ***

# Folder names inside your S3 bucket
STATICFILES_LOCATION = 'static'
MEDIAFILES_LOCATION = 'media'

# Construct the full URLs for static and media files using the CloudFront domain
STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{STATICFILES_LOCATION}/'
MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{MEDIAFILES_LOCATION}/'


# === Django Storages Backend Configuration (Modern Django 3.1+ way) ===
STORAGES = {
    "default": { # This is for DEFAULT_FILE_STORAGE (media files)
        "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
        "OPTIONS": {
            "bucket_name": AWS_STORAGE_BUCKET_NAME, # Use the variables defined above
            "access_key": AWS_ACCESS_KEY_ID,
            "secret_key": AWS_SECRET_ACCESS_KEY,
            "region_name": AWS_S3_REGION_NAME,
            "default_acl": "private", # Media files typically not public
            "querystring_auth": True, # Enables signed URLs for private media access
            "file_overwrite": False,
            "custom_domain": AWS_S3_CUSTOM_DOMAIN,
            "location": MEDIAFILES_LOCATION,
            "signature_version": AWS_S3_SIGNATURE_VERSION,
        },
    },
    "staticfiles": { # This is for STATICFILES_STORAGE (static files)
        "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
        "OPTIONS": {
            "bucket_name": AWS_STORAGE_BUCKET_NAME,
            "access_key": AWS_ACCESS_KEY_ID,
            "secret_key": AWS_SECRET_ACCESS_KEY,
            "region_name": AWS_S3_REGION_NAME,
            "default_acl": "public-read", # Static files must be publicly readable
            "querystring_auth": False, # Important for publicly accessible static files (no signed URLs)
            "file_overwrite": False,
            "custom_domain": AWS_S3_CUSTOM_DOMAIN,
            "location": STATICFILES_LOCATION,
            "signature_version": AWS_S3_SIGNATURE_VERSION,
        },
    },
}

# Explicitly tell Django to use the new STORAGES config
# (These lines are effectively equivalent to the old STATICFILES_STORAGE and DEFAULT_FILE_STORAGE settings)
DEFAULT_FILE_STORAGE = "default" # Refers to the "default" key in STORAGES
STATICFILES_STORAGE = "staticfiles" # Refers to the "staticfiles" key in STORAGES

# For local development with DEBUG=True, Django's runserver will serve static files.
# When DEBUG=False (production), it relies on STATICFILES_STORAGE.